service: OrderService

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-2'}
  host: ${file(./config/${self:provider.stage}.json):database.host}
  port: ${file(./config/${self:provider.stage}.json):database.port}
  database: ${file(./config/${self:provider.stage}.json):database.database}
  username: ${file(./config/${self:provider.stage}.json):database.username}
  password: ${file(./config/${self:provider.stage}.json):database.password}
  cognito-arn: ${file(./config/${self:provider.stage}.json):cognito-arn}
#   sqs-queue-url: ${file(./config/${self:provider.stage}.json):sqs-queue-url}
  logRetentionInDays: 7
#   tracing:
#     lambda: true
#     apiGateway: true
  logs:
    restApi: true
  vpc:
    securityGroupIds: ${file(./config/${self:provider.stage}.json):securityGroupIds}
    subnetIds: ${file(./config/${self:provider.stage}.json):subnetIds}
package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - test/**
    - .git/**
    - .serverless/**
    - coverage/**
    - README.md
    - TODO.md
    - LICENSE

functions:
  createOrder:
    name: createOrder-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/createOrder.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to createOrder
    events:
      - http:
          path: /orders
          method: post
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  confirmOrder:
    name: confirmOrder-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/confirmOrder.fun
    memorySize: 256
    timeout: 30
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
      REGION: ${self:provider.region}
      SQS_QUEUE_URL: !Ref OrderConfirmationQueue
    tags:
      purpose: lambda function to confirmOrder
    events:
      - http:
          path: /orders/{id}
          method: put
          request:
            parameters:
              paths:
                id: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  frequentlyBoughtByMe:
    name: frequentlyBoughtByMe-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/getFrequentlyBoughtByMe.fun
    memorySize: 256
    timeout: 30
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to retrive frequently bought products by a user
    events:
      - http:
          path: /orders/frequently-bought-by-me
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  frequentlyBought:
    name: frequentlyBought-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/getFrequentlyBought.fun
    memorySize: 256
    timeout: 30
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to retrive frequently bought products
    events:
      - http:
          path: /orders/frequently-bought
          method: get
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
#   DummyExecutor:
#     name: DummyExec-${self:provider.stage}
#     role: OrdersFunctionsLambdaRole
#     handler: src/orders/dummy.fun
#     memorySize: 256
#     timeout: 300
#     environment:
#       SQS_QUEUE_URL: !Ref OrderConfirmationQueue
  cancelOrder:
    name: cancelOrder-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/cancelOrder.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to confirmOrder
    events:
      - http:
          path: /orders/{id}
          method: delete
          request:
            parameters:
              paths:
                id: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  getOrder:
    name: getOrder-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/getOrder.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to getOrder
    events:
      - http:
          path: /orders/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  getOrdersList:
    name: getOrdersList-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/getOrdersList.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to getOrdersList latest 20 only
    events:
      - http:
          path: /orders
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  getOrderPrice:
    name: getOrderPrice-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/getOrderPrice.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to getOrderPrice
  checkProductPurchase:
    name: checkProductPurchase-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/checkProductPurchase.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to checkProductPurchase
    events:
      - http:
          path: /orders/checkProductPurchase/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  getDeliveryOptions:
    name: getDeliveryOptions-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/getDeliveryOptions.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to getDeliveryOptions
    events:
      - http:
          path: /orders/getDeliveryOptions
          method: get
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  checkProductPurchaseHeadless:
    name: checkProductPurchaseHeadless-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/checkProductPurchase.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to checkProductPurchaseHeadless


resources:
  Resources:
    OrdersFunctionsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: "sts:AssumeRole"
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: logs
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
          - PolicyName: lambda
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
          - PolicyName: VPCAccess
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
          - PolicyName: SQSAccess
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "sqs:SendMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                  - "sqs:GetQueueUrl"
                  - "sqs:ListQueues"
                  - "sqs:ReceiveMessage"
                  - "sqs:SetQueueAttributes"
                Resource: { "Fn::GetAtt" : ["OrderConfirmationQueue", "Arn"]}
    OrderConfirmationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-order-confirmation-queue
        DelaySeconds: 5
        MaximumMessageSize: 262144
        MessageRetentionPeriod: 345600
        VisibilityTimeout: 120
        Tags:
          - Key: Purpose
            Value: OrderQueueing
          - Key: Environment
            Value: ${self:provider.stage}
    # OrderConfirmationQueuePolicy:
    #   Type: AWS::SQS::QueuePolicy
    #   Properties:
    #     PolicyDocument:
    #       Statement:
    #       - Effect: Allow
    #         Principal:
    #           AWS:
    #             - { "Fn::GetAtt" : ["OrdersFunctionsLambdaRole", "Arn"]}
    #         Action:
    #         - sqs:SendMessage
    #         - sqs:DeleteMessage
    #         - sqs:GetQueueAttributes
    #         - sqs:GetQueueUrl
    #         - sqs:ListQueues
    #         - sqs:ReceiveMessage
    #         - sqs:SetQueueAttributes
    #         Resource: "*"
    #     Queues:
    #       - !Ref OrderConfirmationQueue
