service: OrderService

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-2
  host: ${env:HOST}
  port: ${env:PORT}
  database: ${env:DATABASE}
  username: ${env:USERNAME}
  password: ${env:PASSWORD}
  cognito-arn: ${env:COGNITO_ARN}
  logRetentionInDays: 7
#   tracing:
#     lambda: true
#     apiGateway: true
  logs:
    restApi: true
  vpc:
    securityGroupIds:
      - sg-bdeab9d6
    subnetIds:
      - subnet-9c76e2f5
      - subnet-be6d8af2
      - subnet-e9b86893
package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - test/**
    - .git/**
    - .serverless/**
    - coverage/**
    - README.md
    - TODO.md
    - LICENSE

functions:
  createOrder:
    name: createOrder-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/createOrder.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to createOrder
    events:
      - http:
          path: /orders
          method: post
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  confirmOrder:
    name: confirmOrder-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/confirmOrder.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to confirmOrder
    events:
      - http:
          path: /orders/{id}
          method: put
          request:
            parameters:
              paths:
                id: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  cancelOrder:
    name: cancelOrder-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/cancelOrder.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to confirmOrder
    events:
      - http:
          path: /orders/{id}
          method: delete
          request:
            parameters:
              paths:
                id: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  getOrder:
    name: getOrder-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/getOrder.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to getOrder
    events:
      - http:
          path: /orders/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  getOrdersList:
    name: getOrdersList-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/getOrdersList.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to getOrdersList latest 20 only
    events:
      - http:
          path: /orders
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  getOrderPrice:
    name: getOrderPrice-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/getOrderPrice.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to getOrderPrice
  checkOrderPurchase:
    name: checkOrderPurchase-${self:provider.stage}
    role: OrdersFunctionsLambdaRole
    handler: src/orders/checkOrderPurchase.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to checkOrderPurchase


resources:
  Resources:
    OrdersFunctionsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: "sts:AssumeRole"
        Path: /
        Policies:
          - PolicyName: logs
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
          - PolicyName: lambda
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
          - PolicyName: VPCAccess
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
